GITIQUETTE

Guidelines for contributors
===========================

(E1) To contribute, make a pull request to https://github.com/MISS3D/s2p

(E2) Make sure that your pull request passes all the tests before sending it.

(E3) Any pull request must be explicitly accepted by two persons before being
merged: a member of the CMLA team and a member of the CNES team.  These two
persons must be different to the author of the pull request.

(E4) Exception to (E3): typos and trivial bugfixes can be merged right away.

(E5) Optional: If the intent of the pull request is not clear, it may be
helpful to refer to the philosophy points (P1)--(P7) outlined below.

(E6) Admissible types of pull requests:
	* [bugfix] solves a concrete problem, changing one or at most two files
	* [feature] adds a new feature which is disabled by default
	* [config] changes the default configuration options
	* [refactor] moves files/functions around without changing the algorithm
	* [testing] changes the testing system, adds test data, etc.
	* [doc] documentation / comments
	* [trivial] typo or trivial bugfix on a single file

(E7) As far as possible, the types of pull requests in (E6) should be mutually exclusive.
For example, you cannot refactor and bugfix.


PHILOSOPHY

Since a perfect program is impossible, compromises are necessary.
We prefer to solve compromises according to the following order:

(P1) The program works.
(P2) The results are precise.
(P3) The program is fast.
(P4) The code is modular.
(P5) The code is the simplest possible.
(P6) The code has the least amount of dependences possible.
(P7) The code is portable.


Guidelines for reviewers
========================

(E6) PR should be closed by order of submission. This means that only
the oldest PR can be merged or closed.

(E7) Rule (E6) does not prevent from starting the review of more recent PR.

(E8) In case changes have been requested or questions asked, the PR
author has 3 business days to adress them.

(E9) If rule (E8) is not respected, the PR can be closed by any member
with write access, in order to avoid blocking other PR. Once the
comments and changes have been adressed, the author can re-open the PR.


PHILOSOPHY

Reviewing pull requests is very different from reviewing scientific
papers: it is a mean of writing better code together. Emphasis should
be on interactions between authors and reviewers to reach
consensus. As such, it is important to keep an open mind and refer to
the philosophy points (R1)--(R7) outlined below.


(R1) Be empathetic. People seldom spend time writing code to bother
reviewers. If you do not understand the purpose of some changes, or if
the problem addressed is not part of your use cases, it does not mean
that the problem does not exist.

(R2) Be helpful. You did not write this code and would probably not
have written it that way. But if you request changes, be specific:
make suggestions, push patches, explain what you expect. Remember, the
goal is to write code together.

(R3) Be reactive. There is nothing worse than a discussion that never
starts. If you ask questions, acknowledge replies, and discuss with
the authors to reach consensus.

(R4) Be Flexible. Rules are meant as a general frame of collaboration,
not as a huge fence around your castle. And rules have bugs and
exceptions too.

(R5) Review purpose first. Agreeing with the purpose and with the code
are two different things. Agreement on the purpose is often more
important for authors than getting the code in master 'as is'. And
reviewing purposes is less time consuming than reviewing code.

(R6) Trust the tests. If tests were not changed in the PR and the
build is passing, then probably nothing outstandingly wrong is done in
the PR. If tests were changed, review tests changes first.

(R7) Be brave. There are and will be bugs in master. And there are
probably bugs in the PR you are reviewing. Do not worry about failing
to spot them, since you are not the only defender: tests are there,
and users too.


